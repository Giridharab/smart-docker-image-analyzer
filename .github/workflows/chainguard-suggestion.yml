name: Suggest Chainguard Images

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  suggest-chainguard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find Dockerfiles
        id: dockerfiles
        run: |
          files=$(find . -type f -name 'Dockerfile')
          echo "dockerfiles=$files" >> $GITHUB_OUTPUT

      - name: Comment PR Suggestions
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const dockerfiles = process.env.DOCKERFILES.split(" ");
            for (const file of dockerfiles) {
              const content = fs.readFileSync(file, 'utf8');
              let suggestions = [];

              const builderMatch = content.match(/^FROM .* AS build/m);
              if (!builderMatch || !builderMatch[0].includes("chainguard/golang")) {
                suggestions.push(`Builder stage: replace \`${builderMatch ? builderMatch[0] : 'missing'}\` with \`ghcr.io/chainguard/golang:1.20 AS build\``);
              }

              const runtimeMatch = content.match(/^FROM .*$/gm)?.slice(-1)[0];
              if (!runtimeMatch || !runtimeMatch.includes("chainguard/static")) {
                suggestions.push(`Runtime stage: replace \`${runtimeMatch || 'missing'}\` with \`ghcr.io/chainguard/static:latest\``);
              }

              if (suggestions.length > 0) {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  event: 'COMMENT',
                  body: `**Suggestions for \`${file}\`:**\n- ${suggestions.join('\n- ')}`
                });
              }
            }
        env:
          DOCKERFILES: ${{ steps.dockerfiles.outputs.dockerfiles }}
